@page "/products/insert"
@inject AppDbContext _context


<h3>Novo Produto</h3>

<EditForm Model="_productModel" OnValidSubmit="@HandleSubmitAsync">

    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="mb-3">
        <label for="Name" class="form-label">Nome:</label>
        <InputText id="Name" class="form-control" type="text" 
        @bind-Value="_productModel.Name"/>
    </div>

    <div class="mb-3">
        <label for="Price" class="form-label">Preço:</label>
        <InputNumber id="Price" class="form-control" type="number" 
        @bind-Value="_productModel.Price"/>
    </div>

    <div class="mb-3">
        <label for="CategoryId" class="form-label">Categoria:</label>
        <InputSelect id="CategoryId" class="form-control" 
        @bind-Value="_productModel.CategoryId">
            @foreach(Category category in _categories) {
                <option value="@category.Id">@category.Name</option>
            }
        </InputSelect>
    </div>

    @if (!string.IsNullOrEmpty(_erroMessage)){
        <div class="alert alert-danger" role="alert">
            @_erroMessage
        </div>
    }

    <button class="btn btn-success" type="submit">Salvar</button>

</EditForm>

@code {

    private Product _productModel = new();
    List<Category> _categories = new();
    string? _erroMessage = null;

    protected override async Task OnInitializedAsync() {
        _categories = await _context.Categories.AsNoTracking().ToListAsync(); 
    }

    async Task HandleSubmitAsync() {
        try {
            await _context.Products.AddAsync(_productModel);
            await _context.SaveChangesAsync();
        } catch (Exception e) {
            _erroMessage = e.Message;
        }
    }
}

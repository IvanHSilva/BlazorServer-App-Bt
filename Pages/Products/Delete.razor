@page "/products/delete/{id:int}"
@inject AppDbContext _context
@inject NavigationManager _navManager

<h3>Excluir Produto @_productModel.Name</h3>

<EditForm Model="@_productModel" OnValidSubmit="@HandleSubmitAsync">

    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="mb-3">
        <label for="Name" class="form-label">Nome:</label>
        <InputText readonly id="Name" class="form-control" type="text" 
        @bind-Value="_productModel.Name"/>
    </div>

    <div class="mb-3">
        <label for="Price" class="form-label">Preço:</label>
        <InputNumber readonly id="Price" class="form-control" type="number" 
        @bind-Value="_productModel.Price"/>
    </div>

    <div class="mb-3">
        <label for="Name" class="form-label">Categoria:</label>
        <InputText readonly id="Name" class="form-control" type="text"
                   @bind-Value="_productModel.Category.Name" />
    </div>

    @if (!string.IsNullOrEmpty(_erroMessage)){
        <div class="alert alert-danger" role="alert">
            @_erroMessage
        </div>
    }

    <button class="btn btn-danger" type="submit">Excluir</button>

</EditForm>

@code {

    [Parameter]
    public int Id { get; set; }  

    private Product? _productModel = new();
    string? _erroMessage = null;

    protected override async Task OnInitializedAsync() {
        _productModel = await _context.Products.AsNoTracking().
        FirstOrDefaultAsync(p => p.Id == Id);
    }

    async Task HandleSubmitAsync() {
        try {
            Product? product = await _context.Products.
            FirstOrDefaultAsync(p => p.Id == Id);
            if (product is null)
                throw new Exception("Produto não encontado");
            
            product.Name = _productModel!.Name;
            product.Price = _productModel.Price;
            product.CategoryId = _productModel.CategoryId;

            _context.Products.Remove(product);
            await _context.SaveChangesAsync();
            
            _navManager.NavigateTo("/products");
        } catch (Exception e) {
            _erroMessage = e.Message;
        }
    }
}
